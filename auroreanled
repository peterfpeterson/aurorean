#!/usr/bin/env python3
from __future__ import (absolute_import, division, print_function)

import datetime
import hashlib
import json
import os
import requests

class DarkSky(object):
    def __init__(self, info):
        self.__data = None

        if info is None:
            self.url = None
            self.hash = None
        else:
            try:
                self.url = 'https://api.darksky.net/forecast/{secret}/{lat},{lon}'.format(**info)
                self.hash = '{secret}/{lat},{lon}'.format(**info)
                self.hash = hashlib.md5(self.hash.encode()).hexdigest()
            except KeyError as e:
                print('While getting darksky information')
                raise e

        self.__get()

    def __str__(self):
        return self.url

    def __get(self):
        if self.__data is not None:
            return

        cachefile = 'darksky_{0}.json'.format(self.hash)
        self.__data = None
        if os.path.exists(cachefile):
            file_created = datetime.datetime.fromtimestamp(os.path.getctime(cachefile))
            delta = datetime.datetime.now() - file_created
            delta = delta.total_seconds()
            if delta > 3600.:  # older than an hour
                print('removing old cache file', cachefile)
                os.remove(cachefile)
            else:
                print('loading data from cache file', cachefile)
                with open(cachefile, 'r') as handle:
                    self.__data = json.load(handle)

        if self.__data is None:
            print('getting data from darksky')

            options = dict(exclude='minutely',
                           units='us')

            # https://darksky.net/dev/docs/forecast
            req = requests.get(self.url, options)
            print('request returned', req.status_code)
            if req.status_code != 200:
                print(req)
                raise RuntimeError('Something went wrong')
            # https://darksky.net/dev/docs/response
            self.__data = req.json()

            print('writing data to cache file', cachefile)
            with open(cachefile, 'w') as handle:
                json.dump(self.__data, handle)

    def currently(self):
        return self.__data['currently']

    def hourly(self):
        return self.__data['hourly']

    def daily(self):
        return self.__data['daily']

    def alerts(self):
        return self.__data.get('alerts', None)

if __name__ == "__main__":
    config = 'aurorean.json'

    if os.path.exists(config):
        with open(config, 'r') as handle:
            config = json.load(handle)
    else:
        raise RuntimeError('failed to find configuration', config)

    # get information for darksky
    darksky = DarkSky(config.get('darksky', None))

    print(darksky.currently())
    print('*****')
    print(darksky.alerts())
